// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: face.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 人脸搜索参数
type SearchOption struct {
	// 图片信息
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// 图片类型
	ImageType string `protobuf:"bytes,2,opt,name=imageType,proto3" json:"image_type"`
	// 指定用户组
	GroupIdList string `protobuf:"bytes,3,opt,name=groupIdList,proto3" json:"group_id_list"`
	// 图片质量
	QualityControl string `protobuf:"bytes,4,opt,name=qualityControl,proto3" json:"quality_control"`
	// 活体检测
	LivenessControl bool `protobuf:"varint,5,opt,name=livenessControl,proto3" json:"liveness_control"`
	// 对比用户
	UserId string `protobuf:"bytes,6,opt,name=userId,proto3" json:"user_id"`
	// 最近似用户
	MaxUserNum int32 `protobuf:"varint,7,opt,name=maxUserNum,proto3" json:"max_user_num"`
}

func (m *SearchOption) Reset()         { *m = SearchOption{} }
func (m *SearchOption) String() string { return proto.CompactTextString(m) }
func (*SearchOption) ProtoMessage()    {}
func (*SearchOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_82f0a3d8f947a777, []int{0}
}
func (m *SearchOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SearchOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchOption.Merge(dst, src)
}
func (m *SearchOption) XXX_Size() int {
	return m.Size()
}
func (m *SearchOption) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchOption.DiscardUnknown(m)
}

var xxx_messageInfo_SearchOption proto.InternalMessageInfo

// 人脸搜索结果
type SearchResult struct {
	// 人脸标志
	FaceToken string `protobuf:"bytes,1,opt,name=faceToken,proto3" json:"face_token"`
	// 匹配的用户信息列表
	UserList []*BaiduFaceUser `protobuf:"bytes,2,rep,name=userList" json:"user_list"`
}

func (m *SearchResult) Reset()         { *m = SearchResult{} }
func (m *SearchResult) String() string { return proto.CompactTextString(m) }
func (*SearchResult) ProtoMessage()    {}
func (*SearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_82f0a3d8f947a777, []int{1}
}
func (m *SearchResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResult.Merge(dst, src)
}
func (m *SearchResult) XXX_Size() int {
	return m.Size()
}
func (m *SearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResult proto.InternalMessageInfo

type BaiduFaceUser struct {
	// 用户所属的group_id
	GroupId string `protobuf:"bytes,1,opt,name=groupId,proto3" json:"group_id"`
	// 用户的user_id
	UserId string `protobuf:"bytes,2,opt,name=userId,proto3" json:"user_id"`
	// 注册用户时携带的user_info
	UserInfo string `protobuf:"bytes,3,opt,name=userInfo,proto3" json:"user_info"`
	// 用户的匹配得分，推荐阈值80分
	Score float64 `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *BaiduFaceUser) Reset()         { *m = BaiduFaceUser{} }
func (m *BaiduFaceUser) String() string { return proto.CompactTextString(m) }
func (*BaiduFaceUser) ProtoMessage()    {}
func (*BaiduFaceUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_82f0a3d8f947a777, []int{2}
}
func (m *BaiduFaceUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaiduFaceUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaiduFaceUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BaiduFaceUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaiduFaceUser.Merge(dst, src)
}
func (m *BaiduFaceUser) XXX_Size() int {
	return m.Size()
}
func (m *BaiduFaceUser) XXX_DiscardUnknown() {
	xxx_messageInfo_BaiduFaceUser.DiscardUnknown(m)
}

var xxx_messageInfo_BaiduFaceUser proto.InternalMessageInfo

type DetectOption struct {
	// 图片信息
	Image string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	// 图片类型
	ImageType string `protobuf:"bytes,2,opt,name=imageType,proto3" json:"image_type"`
	// 包括age,beauty,expression,face_shape,gender,glasses,landmark,race,quality,face_type信息
	FaceField string `protobuf:"bytes,3,opt,name=faceField,proto3" json:"face_field"`
	// 最多处理人脸的数目
	MaxFaceNum string `protobuf:"bytes,4,opt,name=maxFaceNum,proto3" json:"max_face_num"`
	// 人脸的类型
	FaceType bool `protobuf:"varint,5,opt,name=faceType,proto3" json:"face_type"`
}

func (m *DetectOption) Reset()         { *m = DetectOption{} }
func (m *DetectOption) String() string { return proto.CompactTextString(m) }
func (*DetectOption) ProtoMessage()    {}
func (*DetectOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_82f0a3d8f947a777, []int{3}
}
func (m *DetectOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetectOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetectOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DetectOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectOption.Merge(dst, src)
}
func (m *DetectOption) XXX_Size() int {
	return m.Size()
}
func (m *DetectOption) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectOption.DiscardUnknown(m)
}

var xxx_messageInfo_DetectOption proto.InternalMessageInfo

type DetectResult struct {
	FaceNum  int32       `protobuf:"varint,1,opt,name=faceNum,proto3" json:"face_num"`
	FaceList []*FaceInfo `protobuf:"bytes,2,rep,name=faceList" json:"face_list"`
}

func (m *DetectResult) Reset()         { *m = DetectResult{} }
func (m *DetectResult) String() string { return proto.CompactTextString(m) }
func (*DetectResult) ProtoMessage()    {}
func (*DetectResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_82f0a3d8f947a777, []int{4}
}
func (m *DetectResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DetectResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DetectResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DetectResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DetectResult.Merge(dst, src)
}
func (m *DetectResult) XXX_Size() int {
	return m.Size()
}
func (m *DetectResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DetectResult.DiscardUnknown(m)
}

var xxx_messageInfo_DetectResult proto.InternalMessageInfo

type FaceInfo struct {
	FaceToken       string        `protobuf:"bytes,1,opt,name=faceToken,proto3" json:"face_token"`
	Age             int32         `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	Angle           *Angle        `protobuf:"bytes,3,opt,name=angle" json:"angle,omitempty"`
	Beauty          float64       `protobuf:"fixed64,4,opt,name=beauty,proto3" json:"beauty,omitempty"`
	FaceProbability float64       `protobuf:"fixed64,5,opt,name=faceProbability,proto3" json:"faceProbability,omitempty"`
	FaceShape       *InfoType     `protobuf:"bytes,6,opt,name=faceShape" json:"faceShape,omitempty"`
	FaceType        *InfoType     `protobuf:"bytes,7,opt,name=faceType" json:"faceType,omitempty"`
	Gender          *InfoType     `protobuf:"bytes,8,opt,name=gender" json:"gender,omitempty"`
	Glasses         *InfoType     `protobuf:"bytes,9,opt,name=glasses" json:"glasses,omitempty"`
	Expression      *InfoType     `protobuf:"bytes,10,opt,name=expression" json:"expression,omitempty"`
	Landmark        []*Point      `protobuf:"bytes,11,rep,name=Landmark" json:"Landmark,omitempty"`
	Landmark72      []*Point      `protobuf:"bytes,12,rep,name=Landmark72" json:"Landmark72,omitempty"`
	Location        *FaceLocation `protobuf:"bytes,13,opt,name=location" json:"location,omitempty"`
}

func (m *FaceInfo) Reset()         { *m = FaceInfo{} }
func (m *FaceInfo) String() string { return proto.CompactTextString(m) }
func (*FaceInfo) ProtoMessage()    {}
func (*FaceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_82f0a3d8f947a777, []int{5}
}
func (m *FaceInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FaceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FaceInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FaceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceInfo.Merge(dst, src)
}
func (m *FaceInfo) XXX_Size() int {
	return m.Size()
}
func (m *FaceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FaceInfo proto.InternalMessageInfo

type InfoType struct {
	Probability float64 `protobuf:"fixed64,1,opt,name=probability,proto3" json:"probability,omitempty"`
	Type        string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *InfoType) Reset()         { *m = InfoType{} }
func (m *InfoType) String() string { return proto.CompactTextString(m) }
func (*InfoType) ProtoMessage()    {}
func (*InfoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_82f0a3d8f947a777, []int{6}
}
func (m *InfoType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *InfoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoType.Merge(dst, src)
}
func (m *InfoType) XXX_Size() int {
	return m.Size()
}
func (m *InfoType) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoType.DiscardUnknown(m)
}

var xxx_messageInfo_InfoType proto.InternalMessageInfo

type Point struct {
	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_82f0a3d8f947a777, []int{7}
}
func (m *Point) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Point.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(dst, src)
}
func (m *Point) XXX_Size() int {
	return m.Size()
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

// 人脸旋转角度参数
type Angle struct {
	// 三维旋转之左右旋转角[-90(左), 90(右)]
	Pitch float64 `protobuf:"fixed64,1,opt,name=pitch,proto3" json:"pitch,omitempty"`
	// 三维旋转之俯仰角度[-90(上), 90(下)]
	Roll float64 `protobuf:"fixed64,2,opt,name=roll,proto3" json:"roll,omitempty"`
	// 平面内旋转角[-180(逆时针), 180(顺时针)]
	Yaw float64 `protobuf:"fixed64,3,opt,name=yaw,proto3" json:"yaw,omitempty"`
}

func (m *Angle) Reset()         { *m = Angle{} }
func (m *Angle) String() string { return proto.CompactTextString(m) }
func (*Angle) ProtoMessage()    {}
func (*Angle) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_82f0a3d8f947a777, []int{8}
}
func (m *Angle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Angle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Angle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Angle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Angle.Merge(dst, src)
}
func (m *Angle) XXX_Size() int {
	return m.Size()
}
func (m *Angle) XXX_DiscardUnknown() {
	xxx_messageInfo_Angle.DiscardUnknown(m)
}

var xxx_messageInfo_Angle proto.InternalMessageInfo

// 人脸在图片中的位置
type FaceLocation struct {
	Left     int32 `protobuf:"varint,1,opt,name=left,proto3" json:"left,omitempty"`
	Top      int32 `protobuf:"varint,2,opt,name=top,proto3" json:"top,omitempty"`
	Width    int32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height   int32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Rotation int32 `protobuf:"varint,5,opt,name=rotation,proto3" json:"rotation,omitempty"`
}

func (m *FaceLocation) Reset()         { *m = FaceLocation{} }
func (m *FaceLocation) String() string { return proto.CompactTextString(m) }
func (*FaceLocation) ProtoMessage()    {}
func (*FaceLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_face_82f0a3d8f947a777, []int{9}
}
func (m *FaceLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FaceLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FaceLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FaceLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FaceLocation.Merge(dst, src)
}
func (m *FaceLocation) XXX_Size() int {
	return m.Size()
}
func (m *FaceLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_FaceLocation.DiscardUnknown(m)
}

var xxx_messageInfo_FaceLocation proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SearchOption)(nil), "funxdata.baidu.SearchOption")
	proto.RegisterType((*SearchResult)(nil), "funxdata.baidu.SearchResult")
	proto.RegisterType((*BaiduFaceUser)(nil), "funxdata.baidu.BaiduFaceUser")
	proto.RegisterType((*DetectOption)(nil), "funxdata.baidu.DetectOption")
	proto.RegisterType((*DetectResult)(nil), "funxdata.baidu.DetectResult")
	proto.RegisterType((*FaceInfo)(nil), "funxdata.baidu.FaceInfo")
	proto.RegisterType((*InfoType)(nil), "funxdata.baidu.InfoType")
	proto.RegisterType((*Point)(nil), "funxdata.baidu.Point")
	proto.RegisterType((*Angle)(nil), "funxdata.baidu.Angle")
	proto.RegisterType((*FaceLocation)(nil), "funxdata.baidu.FaceLocation")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FaceClient is the client API for Face service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaceClient interface {
	Search(ctx context.Context, in *SearchOption, opts ...grpc.CallOption) (*SearchResult, error)
	Detect(ctx context.Context, in *DetectOption, opts ...grpc.CallOption) (*DetectResult, error)
}

type faceClient struct {
	cc *grpc.ClientConn
}

func NewFaceClient(cc *grpc.ClientConn) FaceClient {
	return &faceClient{cc}
}

func (c *faceClient) Search(ctx context.Context, in *SearchOption, opts ...grpc.CallOption) (*SearchResult, error) {
	out := new(SearchResult)
	err := c.cc.Invoke(ctx, "/funxdata.baidu.Face/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faceClient) Detect(ctx context.Context, in *DetectOption, opts ...grpc.CallOption) (*DetectResult, error) {
	out := new(DetectResult)
	err := c.cc.Invoke(ctx, "/funxdata.baidu.Face/Detect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaceServer is the server API for Face service.
type FaceServer interface {
	Search(context.Context, *SearchOption) (*SearchResult, error)
	Detect(context.Context, *DetectOption) (*DetectResult, error)
}

func RegisterFaceServer(s *grpc.Server, srv FaceServer) {
	s.RegisterService(&_Face_serviceDesc, srv)
}

func _Face_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funxdata.baidu.Face/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceServer).Search(ctx, req.(*SearchOption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Face_Detect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectOption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaceServer).Detect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/funxdata.baidu.Face/Detect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaceServer).Detect(ctx, req.(*DetectOption))
	}
	return interceptor(ctx, in, info, handler)
}

var _Face_serviceDesc = grpc.ServiceDesc{
	ServiceName: "funxdata.baidu.Face",
	HandlerType: (*FaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Face_Search_Handler,
		},
		{
			MethodName: "Detect",
			Handler:    _Face_Detect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "face.proto",
}

func (m *SearchOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchOption) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Image) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.ImageType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.ImageType)))
		i += copy(dAtA[i:], m.ImageType)
	}
	if len(m.GroupIdList) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.GroupIdList)))
		i += copy(dAtA[i:], m.GroupIdList)
	}
	if len(m.QualityControl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.QualityControl)))
		i += copy(dAtA[i:], m.QualityControl)
	}
	if m.LivenessControl {
		dAtA[i] = 0x28
		i++
		if m.LivenessControl {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if m.MaxUserNum != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.MaxUserNum))
	}
	return i, nil
}

func (m *SearchResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FaceToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.FaceToken)))
		i += copy(dAtA[i:], m.FaceToken)
	}
	if len(m.UserList) > 0 {
		for _, msg := range m.UserList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BaiduFaceUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaiduFaceUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GroupId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.GroupId)))
		i += copy(dAtA[i:], m.GroupId)
	}
	if len(m.UserId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.UserId)))
		i += copy(dAtA[i:], m.UserId)
	}
	if len(m.UserInfo) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.UserInfo)))
		i += copy(dAtA[i:], m.UserInfo)
	}
	if m.Score != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Score))))
		i += 8
	}
	return i, nil
}

func (m *DetectOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetectOption) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Image) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.ImageType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.ImageType)))
		i += copy(dAtA[i:], m.ImageType)
	}
	if len(m.FaceField) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.FaceField)))
		i += copy(dAtA[i:], m.FaceField)
	}
	if len(m.MaxFaceNum) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.MaxFaceNum)))
		i += copy(dAtA[i:], m.MaxFaceNum)
	}
	if m.FaceType {
		dAtA[i] = 0x28
		i++
		if m.FaceType {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DetectResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DetectResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FaceNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.FaceNum))
	}
	if len(m.FaceList) > 0 {
		for _, msg := range m.FaceList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintFace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FaceInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FaceInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FaceToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.FaceToken)))
		i += copy(dAtA[i:], m.FaceToken)
	}
	if m.Age != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.Age))
	}
	if m.Angle != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.Angle.Size()))
		n1, err := m.Angle.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Beauty != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Beauty))))
		i += 8
	}
	if m.FaceProbability != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.FaceProbability))))
		i += 8
	}
	if m.FaceShape != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.FaceShape.Size()))
		n2, err := m.FaceShape.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.FaceType != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.FaceType.Size()))
		n3, err := m.FaceType.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Gender != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.Gender.Size()))
		n4, err := m.Gender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Glasses != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.Glasses.Size()))
		n5, err := m.Glasses.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Expression != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.Expression.Size()))
		n6, err := m.Expression.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Landmark) > 0 {
		for _, msg := range m.Landmark {
			dAtA[i] = 0x5a
			i++
			i = encodeVarintFace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Landmark72) > 0 {
		for _, msg := range m.Landmark72 {
			dAtA[i] = 0x62
			i++
			i = encodeVarintFace(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Location != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.Location.Size()))
		n7, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *InfoType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Probability != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Probability))))
		i += 8
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFace(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	return i, nil
}

func (m *Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Point) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.X))))
		i += 8
	}
	if m.Y != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Y))))
		i += 8
	}
	return i, nil
}

func (m *Angle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Angle) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pitch != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Pitch))))
		i += 8
	}
	if m.Roll != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Roll))))
		i += 8
	}
	if m.Yaw != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Yaw))))
		i += 8
	}
	return i, nil
}

func (m *FaceLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FaceLocation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Left != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.Left))
	}
	if m.Top != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.Top))
	}
	if m.Width != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.Width))
	}
	if m.Height != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.Height))
	}
	if m.Rotation != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFace(dAtA, i, uint64(m.Rotation))
	}
	return i, nil
}

func encodeVarintFace(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SearchOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	l = len(m.ImageType)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	l = len(m.GroupIdList)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	l = len(m.QualityControl)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	if m.LivenessControl {
		n += 2
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	if m.MaxUserNum != 0 {
		n += 1 + sovFace(uint64(m.MaxUserNum))
	}
	return n
}

func (m *SearchResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FaceToken)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	if len(m.UserList) > 0 {
		for _, e := range m.UserList {
			l = e.Size()
			n += 1 + l + sovFace(uint64(l))
		}
	}
	return n
}

func (m *BaiduFaceUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	l = len(m.UserInfo)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	if m.Score != 0 {
		n += 9
	}
	return n
}

func (m *DetectOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	l = len(m.ImageType)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	l = len(m.FaceField)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	l = len(m.MaxFaceNum)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	if m.FaceType {
		n += 2
	}
	return n
}

func (m *DetectResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FaceNum != 0 {
		n += 1 + sovFace(uint64(m.FaceNum))
	}
	if len(m.FaceList) > 0 {
		for _, e := range m.FaceList {
			l = e.Size()
			n += 1 + l + sovFace(uint64(l))
		}
	}
	return n
}

func (m *FaceInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FaceToken)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovFace(uint64(m.Age))
	}
	if m.Angle != nil {
		l = m.Angle.Size()
		n += 1 + l + sovFace(uint64(l))
	}
	if m.Beauty != 0 {
		n += 9
	}
	if m.FaceProbability != 0 {
		n += 9
	}
	if m.FaceShape != nil {
		l = m.FaceShape.Size()
		n += 1 + l + sovFace(uint64(l))
	}
	if m.FaceType != nil {
		l = m.FaceType.Size()
		n += 1 + l + sovFace(uint64(l))
	}
	if m.Gender != nil {
		l = m.Gender.Size()
		n += 1 + l + sovFace(uint64(l))
	}
	if m.Glasses != nil {
		l = m.Glasses.Size()
		n += 1 + l + sovFace(uint64(l))
	}
	if m.Expression != nil {
		l = m.Expression.Size()
		n += 1 + l + sovFace(uint64(l))
	}
	if len(m.Landmark) > 0 {
		for _, e := range m.Landmark {
			l = e.Size()
			n += 1 + l + sovFace(uint64(l))
		}
	}
	if len(m.Landmark72) > 0 {
		for _, e := range m.Landmark72 {
			l = e.Size()
			n += 1 + l + sovFace(uint64(l))
		}
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovFace(uint64(l))
	}
	return n
}

func (m *InfoType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Probability != 0 {
		n += 9
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovFace(uint64(l))
	}
	return n
}

func (m *Point) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	return n
}

func (m *Angle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pitch != 0 {
		n += 9
	}
	if m.Roll != 0 {
		n += 9
	}
	if m.Yaw != 0 {
		n += 9
	}
	return n
}

func (m *FaceLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Left != 0 {
		n += 1 + sovFace(uint64(m.Left))
	}
	if m.Top != 0 {
		n += 1 + sovFace(uint64(m.Top))
	}
	if m.Width != 0 {
		n += 1 + sovFace(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovFace(uint64(m.Height))
	}
	if m.Rotation != 0 {
		n += 1 + sovFace(uint64(m.Rotation))
	}
	return n
}

func sovFace(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFace(x uint64) (n int) {
	return sovFace(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SearchOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIdList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupIdList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualityControl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QualityControl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivenessControl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LivenessControl = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUserNum", wireType)
			}
			m.MaxUserNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUserNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserList = append(m.UserList, &BaiduFaceUser{})
			if err := m.UserList[len(m.UserList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaiduFaceUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaiduFaceUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaiduFaceUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Score = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetectOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetectOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetectOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceField", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceField = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFaceNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxFaceNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceType", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FaceType = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DetectResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DetectResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DetectResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceNum", wireType)
			}
			m.FaceNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FaceNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceList = append(m.FaceList, &FaceInfo{})
			if err := m.FaceList[len(m.FaceList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FaceInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FaceInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FaceInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Angle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Angle == nil {
				m.Angle = &Angle{}
			}
			if err := m.Angle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beauty", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Beauty = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceProbability", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.FaceProbability = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceShape", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FaceShape == nil {
				m.FaceShape = &InfoType{}
			}
			if err := m.FaceShape.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FaceType == nil {
				m.FaceType = &InfoType{}
			}
			if err := m.FaceType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Gender == nil {
				m.Gender = &InfoType{}
			}
			if err := m.Gender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Glasses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Glasses == nil {
				m.Glasses = &InfoType{}
			}
			if err := m.Glasses.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expression", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expression == nil {
				m.Expression = &InfoType{}
			}
			if err := m.Expression.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Landmark", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Landmark = append(m.Landmark, &Point{})
			if err := m.Landmark[len(m.Landmark)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Landmark72", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Landmark72 = append(m.Landmark72, &Point{})
			if err := m.Landmark72[len(m.Landmark72)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &FaceLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Probability = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFace
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.X = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Y = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Angle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Angle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Angle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pitch", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Pitch = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roll", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Roll = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Yaw", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Yaw = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FaceLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFace
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FaceLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FaceLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			m.Left = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Left |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			m.Top = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Top |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			m.Rotation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFace
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rotation |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFace(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFace
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFace(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFace
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFace
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFace
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFace
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFace(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFace = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFace   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("face.proto", fileDescriptor_face_82f0a3d8f947a777) }

var fileDescriptor_face_82f0a3d8f947a777 = []byte{
	// 956 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xce, 0xb4, 0x75, 0x92, 0xbe, 0xa4, 0x3f, 0x18, 0x16, 0x64, 0x55, 0x90, 0x54, 0x5e, 0xb4,
	0x2a, 0x02, 0xb2, 0x4b, 0x96, 0x1f, 0x2b, 0x21, 0x21, 0x48, 0x51, 0x45, 0xa5, 0x0a, 0x56, 0xb3,
	0xe5, 0xc2, 0x25, 0x9a, 0xc4, 0x93, 0xc4, 0x5a, 0xc7, 0x63, 0xec, 0x31, 0x9b, 0x08, 0x89, 0x23,
	0x67, 0x4e, 0xdc, 0xf8, 0x7f, 0x7a, 0xdc, 0x23, 0x12, 0x22, 0x82, 0xf6, 0x16, 0xfe, 0x09, 0x34,
	0x6f, 0xc6, 0x8e, 0x37, 0xdd, 0x52, 0x21, 0x71, 0xa9, 0xe6, 0xcd, 0xfb, 0xde, 0xbc, 0x37, 0xdf,
	0xf7, 0x8d, 0x53, 0x80, 0x11, 0x1f, 0x8a, 0x4e, 0x9c, 0x48, 0x25, 0xe9, 0xee, 0x28, 0x8b, 0x66,
	0x3e, 0x57, 0xbc, 0x33, 0xe0, 0x81, 0x9f, 0x1d, 0xbc, 0x37, 0x0e, 0xd4, 0x24, 0x1b, 0x74, 0x86,
	0x72, 0x7a, 0x7f, 0x2c, 0xc7, 0xf2, 0x3e, 0xc2, 0x06, 0xd9, 0x08, 0x23, 0x0c, 0x70, 0x65, 0xca,
	0xbd, 0xdf, 0x37, 0xa0, 0xf9, 0x44, 0xf0, 0x64, 0x38, 0xf9, 0x3a, 0x56, 0x81, 0x8c, 0xe8, 0x1d,
	0x70, 0x82, 0x29, 0x1f, 0x0b, 0x97, 0x1c, 0x92, 0xa3, 0x6d, 0x66, 0x02, 0xfa, 0x2e, 0x6c, 0xe3,
	0xe2, 0x7c, 0x1e, 0x0b, 0x77, 0x43, 0x67, 0x7a, 0xbb, 0xcb, 0x45, 0x1b, 0x70, 0xb3, 0xaf, 0xe6,
	0xb1, 0x60, 0x2b, 0x00, 0x7d, 0x08, 0x8d, 0x71, 0x22, 0xb3, 0xf8, 0xd4, 0x3f, 0x0b, 0x52, 0xe5,
	0x6e, 0x22, 0xfe, 0x95, 0xe5, 0xa2, 0xbd, 0x83, 0xdb, 0xfd, 0xc0, 0xef, 0x87, 0x41, 0xaa, 0x58,
	0x19, 0x45, 0x3f, 0x81, 0xdd, 0xef, 0x32, 0x1e, 0x06, 0x6a, 0x7e, 0x2c, 0x23, 0x95, 0xc8, 0xd0,
	0xdd, 0xc2, 0xba, 0x57, 0x97, 0x8b, 0xf6, 0x9e, 0xcd, 0xf4, 0x87, 0x26, 0xc5, 0xd6, 0xa0, 0xf4,
	0x53, 0xd8, 0x0b, 0x83, 0xef, 0x45, 0x24, 0xd2, 0x34, 0xaf, 0x76, 0x0e, 0xc9, 0x51, 0xbd, 0x77,
	0x67, 0xb9, 0x68, 0xef, 0xe7, 0xa9, 0xa2, 0x7c, 0x1d, 0x4c, 0xef, 0x42, 0x35, 0x4b, 0x45, 0x72,
	0xea, 0xbb, 0x55, 0x6c, 0xda, 0x58, 0x2e, 0xda, 0x35, 0xbd, 0xd3, 0x0f, 0x7c, 0x66, 0x53, 0xf4,
	0x01, 0xc0, 0x94, 0xcf, 0xbe, 0x49, 0x45, 0xf2, 0x55, 0x36, 0x75, 0x6b, 0x87, 0xe4, 0xc8, 0xe9,
	0xed, 0x2f, 0x17, 0xed, 0xe6, 0x94, 0xcf, 0xfa, 0x08, 0x8e, 0xb2, 0x29, 0x2b, 0x61, 0xbc, 0x9f,
	0x48, 0xce, 0x2e, 0x13, 0x69, 0x16, 0x2a, 0xcd, 0xa3, 0xd6, 0xee, 0x5c, 0x3e, 0x15, 0x91, 0x61,
	0xd8, 0xf0, 0xa8, 0x37, 0xfb, 0x4a, 0xef, 0xb2, 0x15, 0x80, 0x7e, 0x09, 0x75, 0x7d, 0x2c, 0x92,
	0xb8, 0x71, 0xb8, 0x79, 0xd4, 0xe8, 0xbe, 0xd9, 0x79, 0x51, 0xee, 0x4e, 0x4f, 0xff, 0x3d, 0xe1,
	0x43, 0xa1, 0x5b, 0xf6, 0x76, 0x96, 0x8b, 0xf6, 0x36, 0x4e, 0x82, 0xfc, 0x16, 0xd5, 0xde, 0xaf,
	0x04, 0x76, 0x5e, 0x80, 0xd2, 0x7b, 0x50, 0xb3, 0xec, 0xdb, 0x39, 0x9a, 0xcb, 0x45, 0xbb, 0x9e,
	0xeb, 0xc3, 0xf2, 0x64, 0x89, 0x99, 0x8d, 0x9b, 0x99, 0x79, 0xdb, 0x0c, 0x7a, 0x1a, 0x8d, 0xa4,
	0x55, 0x7b, 0x35, 0x49, 0x10, 0x8d, 0x24, 0x2b, 0xd2, 0xda, 0x5f, 0xe9, 0x50, 0x26, 0x02, 0xd5,
	0x25, 0xcc, 0x04, 0xde, 0x1f, 0x04, 0x9a, 0x5f, 0x08, 0x25, 0x86, 0xea, 0x7f, 0xb4, 0xa1, 0x25,
	0xfb, 0x24, 0x10, 0xa1, 0x6f, 0xc7, 0x5a, 0x91, 0x3d, 0xd2, 0xbb, 0x6c, 0x05, 0xb0, 0xea, 0x6a,
	0x7e, 0xb4, 0xba, 0xc6, 0x7b, 0x85, 0xba, 0x58, 0x92, 0xab, 0x6b, 0x31, 0xfa, 0xd6, 0xa8, 0x95,
	0x1e, 0xc6, 0xb8, 0x0d, 0x6f, 0x6d, 0xb4, 0xd4, 0xb3, 0x14, 0x69, 0xef, 0x87, 0xfc, 0x7a, 0xd6,
	0x07, 0xf7, 0xa0, 0x36, 0xb2, 0x9d, 0x08, 0xfa, 0x08, 0xd9, 0x2f, 0xba, 0xe4, 0x49, 0x7a, 0x6c,
	0x5a, 0x94, 0x1c, 0xe0, 0xae, 0x3b, 0x40, 0x4f, 0xa3, 0x99, 0x2d, 0x35, 0x37, 0xe2, 0xe7, 0x85,
	0xde, 0xdf, 0x5b, 0x50, 0xcf, 0x51, 0xff, 0xd1, 0x81, 0xfb, 0xb0, 0xa9, 0x45, 0xd0, 0x54, 0x3b,
	0x4c, 0x2f, 0xe9, 0x3b, 0xe0, 0xf0, 0x68, 0x1c, 0x0a, 0x24, 0xb4, 0xd1, 0x7d, 0x6d, 0x7d, 0x9c,
	0xcf, 0x75, 0x92, 0x19, 0x0c, 0x7d, 0x1d, 0xaa, 0x03, 0xc1, 0x33, 0x35, 0xb7, 0x6a, 0xdb, 0x88,
	0x1e, 0xc1, 0x9e, 0xee, 0xf1, 0x38, 0x91, 0x03, 0x3e, 0x08, 0xf4, 0x43, 0x46, 0x02, 0x09, 0x5b,
	0xdf, 0xa6, 0x1f, 0x99, 0x71, 0x9f, 0x4c, 0x78, 0x2c, 0xf0, 0x6d, 0xbe, 0x84, 0x01, 0x7d, 0xaf,
	0x73, 0xd4, 0xbe, 0x80, 0xd2, 0x0f, 0x4a, 0xda, 0xd4, 0x6e, 0x29, 0x2b, 0x90, 0xf4, 0x01, 0x54,
	0xc7, 0x22, 0xf2, 0x45, 0xe2, 0xd6, 0x6f, 0xa9, 0xb1, 0x38, 0xda, 0x85, 0xda, 0x38, 0xe4, 0x69,
	0x2a, 0x52, 0x77, 0xfb, 0x96, 0x92, 0x1c, 0x48, 0x1f, 0x01, 0x88, 0x59, 0x9c, 0x88, 0x34, 0x0d,
	0x64, 0xe4, 0xc2, 0x2d, 0x65, 0x25, 0x2c, 0x7d, 0x1f, 0xea, 0x67, 0x3c, 0xf2, 0xa7, 0x3c, 0x79,
	0xea, 0x36, 0xd0, 0x0e, 0xd7, 0xf8, 0x7f, 0x2c, 0x83, 0x48, 0xb1, 0x02, 0x46, 0x3f, 0x04, 0xc8,
	0xd7, 0x1f, 0x77, 0xdd, 0xe6, 0xbf, 0x15, 0x95, 0x80, 0xf4, 0x11, 0xd4, 0x43, 0x39, 0xe4, 0xfa,
	0x2d, 0xba, 0x3b, 0x38, 0xe1, 0x1b, 0x2f, 0x33, 0xde, 0x99, 0xc5, 0xb0, 0x02, 0xed, 0x7d, 0x06,
	0xf5, 0x7c, 0x76, 0x7a, 0x08, 0x8d, 0xb8, 0xa4, 0x31, 0x41, 0x8d, 0xcb, 0x5b, 0x94, 0xc2, 0x96,
	0x2a, 0x1e, 0x33, 0xc3, 0xb5, 0x77, 0x17, 0x1c, 0x1c, 0x88, 0x36, 0x81, 0xcc, 0x6c, 0x11, 0x99,
	0xe9, 0x68, 0x8e, 0x38, 0xc2, 0xc8, 0xdc, 0x3b, 0x06, 0x07, 0xad, 0xa6, 0xbf, 0x14, 0x71, 0xa0,
	0x86, 0x13, 0x0b, 0x34, 0x81, 0x3e, 0x37, 0x91, 0x61, 0x68, 0xf1, 0xb8, 0xd6, 0x66, 0x9e, 0xf3,
	0x67, 0x68, 0x5c, 0xc2, 0xf4, 0xd2, 0xfb, 0x11, 0x9a, 0xe5, 0x5b, 0xe8, 0xaa, 0x50, 0x8c, 0x94,
	0x79, 0x93, 0x0c, 0xd7, 0xba, 0x4a, 0xc9, 0x38, 0x7f, 0x02, 0x4a, 0xc6, 0xba, 0xe3, 0xb3, 0xc0,
	0x57, 0x13, 0x3c, 0xc9, 0x61, 0x26, 0xd0, 0x5e, 0x9f, 0x88, 0x60, 0x3c, 0x51, 0xe8, 0x75, 0x87,
	0xd9, 0x88, 0x1e, 0x40, 0x3d, 0x91, 0xca, 0x30, 0xe9, 0x60, 0xa6, 0x88, 0xbb, 0xbf, 0x10, 0xd8,
	0xd2, 0x03, 0xd0, 0x13, 0xa8, 0x9a, 0xdf, 0x09, 0x7a, 0x8d, 0xe6, 0xf2, 0xaf, 0xf3, 0xc1, 0x0d,
	0x59, 0xf3, 0x55, 0xf1, 0x2a, 0xfa, 0x1c, 0xf3, 0x9d, 0xb9, 0x7e, 0x4e, 0xf9, 0xf3, 0x7a, 0x70,
	0x43, 0x36, 0x3f, 0xa7, 0xf7, 0xd6, 0xc5, 0x5f, 0xad, 0xca, 0xc5, 0x65, 0x8b, 0x3c, 0xbf, 0x6c,
	0x91, 0x3f, 0x2f, 0x5b, 0xe4, 0xe7, 0xab, 0x56, 0xe5, 0xe2, 0xaa, 0x55, 0x79, 0x7e, 0xd5, 0xaa,
	0xfc, 0x76, 0xd5, 0xaa, 0x7c, 0xbb, 0x11, 0x0f, 0x06, 0x55, 0xfc, 0x1f, 0xe2, 0xe1, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xa4, 0x2f, 0xb6, 0x30, 0x90, 0x08, 0x00, 0x00,
}
